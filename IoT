#include <TridentTD_LineNotify.h>
#include <time.h>
#include "DHT.h"
#include <SoftwareSerial.h>


#define BLYNK_TEMPLATE_ID "TMPL6DxGSoS9L"
#define BLYNK_TEMPLATE_NAME "Project IoT"
#include <BlynkSimpleEsp32.h>

#define DHTPIN 23
#define DHTTYPE DHT11

#define BLYNK_AUTH_TOKEN "POx793R8ghgoB2oD8-TNa0rB2zGLYlZc"

// #define SSID "Trdd_ps"                                            //ใส่ ชื่อ Wifi ที่จะเชื่อมต่อ
// #define PASSWORD "0989914539"

#define SSID "James 2.4GHz"  //ใส่ ชื่อ Wifi ที่จะเชื่อมต่อ
#define PASSWORD "Jm0475Bl."
#define LINE_TOKEN "kp1jVTC8RwovwSvbrNx0SdLzyhiYiLGDXntWIaOfBba"  //ใส่ รหัส TOKEN ที่ได้มาจากข้างบน



int timezone = 7 * 3600;
int dst = 0;
int WeekDay;
char day;


SoftwareSerial mySerial(21, 22);  // RX, TX
unsigned int pm1 = 0;
unsigned int pm2_5 = 0;
unsigned int pm10 = 0;


#ifndef ESP32
#pragma message(THIS EXAMPLE IS FOR ESP32 ONLY !)
#error Select ESP32 board.
#endif


void tempTask(void *pvParameters);

TaskHandle_t tempTaskHandle = NULL;

bool tasksEnabled = false;
int dhtPin = 23;
DHT dht(DHTPIN, DHTTYPE);
void setup() {
  WiFi.begin(SSID, PASSWORD);
  Serial.printf("WiFi connecting to %s\n", SSID);
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(400);
  }
  Serial.printf("\nWiFi connected\nIP : ");
  Serial.println(WiFi.localIP());
  Blynk.begin();

  dht.begin();
  delay(100);

  Serial.begin(9600);
  while (!Serial)
    ;
  mySerial.begin(9600);

  // Set Line Token
  LINE.setToken(LINE_TOKEN);
}

bool isTemperatureSent = false;
float hum = dht.readHumidity();
float temp = dht.readTemperature();
int previousTemp = -1;

void loop() {
  Blynk.run();
  int index = 0;
  char value;
  char previousValue;

  configTime(timezone, dst, "ntp.ku.ac.th", "fw.eng.ku.ac.th");
  time_t now = time(nullptr);
  struct tm *p_tm = localtime(&now);
  Serial.print("Date : ");
  switch (p_tm->tm_wday) {
    case 0: Serial.println("Sunday"); break;
    case 1: Serial.println("Monday"); break;
    case 2: Serial.println("Tueday"); break;
    case 3: Serial.println("Wednesday"); break;
    case 4: Serial.println("Thursday"); break;
    case 5: Serial.println("Friday"); break;
    case 6: Serial.println("Satday"); break;
  }
  Serial.print("Time : ");
  Serial.print(p_tm->tm_hour);
  Serial.print(":");
  Serial.print(p_tm->tm_min);
  Serial.print(":");
  Serial.println(p_tm->tm_sec);


  if (isnan(hum) || isnan(temp)) {
    Serial.println(F("Failed to read from DHT sensor!"));
    delay(2000);
    return;
  }
  Serial.println(F("Humidity: "));
  Serial.print(hum);
  Serial.print(F("%  Temperature: "));
  Serial.print(temp);
  Serial.print(F("°C "));
  delay(2000);

  if (temp != previousTemp) {
    if (temp == 0) {
      LINE.notify("High Temperature\n"
                  "Temperature: "
                  + String(temp) + " °C\nHumidity: " + String(hum) + " %");
      LINE.notify("PM1: " + String(pm1) + "ug/m3\n" + "PM2.5: " + String(pm2_5) + "ug/m3\n" + "PM10: " + String(pm10) + "ug/m3");
    } else {

      LINE.notify("Normal Temperature\n"
                  "Temperature: "
                  + String(temp) + " °C\nHumidity: " + String(hum) + " %");
      LINE.notify("PM1: " + String(pm1) + "ug/m3\n" + "PM2.5: " + String(pm2_5) + "ug/m3\n" + "PM10: " + String(pm10) + "ug/m3");
    }
    previousTemp = temp;
  }

  // if ((p_tm->tm_wday == 0) && (p_tm->tm_hour == 12) && (p_tm->tm_min == 0) && (p_tm->tm_sec == 0)) {
  //   LINE.notify("Line");
  // }

  if ((p_tm->tm_sec == 0) || (p_tm->tm_sec == 1)) {
    LINE.notify("Temperature: " + String(temp) + " °C\nHumidity: " + String(hum) + " %");
    LINE.notify("PM1: " + String(pm1) + "ug/m3\n" + "PM2.5: " + String(pm2_5) + "ug/m3\n" + "PM10: " + String(pm10) + "ug/m3");
  }

  while (mySerial.available()) {
    value = mySerial.read();
    if ((index == 0 && value != 0x42) || (index == 1 && value != 0x4d)) {
      Serial.println("Cannot find the data header.");
      break;
    }

    if (index == 4 || index == 6 || index == 8 || index == 10 || index == 12 || index == 14) {
      previousValue = value;

    } else if (index == 5) {

      pm1 = 256 * previousValue + value;
      Serial.print("{ ");
      Serial.print("\"pm1\": ");
      Serial.print(pm1);
      Serial.print(" ug/m3");
      Serial.print(", ");
    } else if (index == 7) {

      pm2_5 = 256 * previousValue + value;
      Serial.print("\"pm2_5\": ");
      Serial.print(pm2_5);
      Serial.print(" ug/m3");
      Serial.print(", ");
    } else if (index == 9) {

      pm10 = 256 * previousValue + value;
      Serial.print("\"pm10\": ");
      Serial.print(pm10);
      Serial.print(" ug/m3");
    } else if (index > 15) {

      break;
    }
    index++;
  }
  while (mySerial.available()) mySerial.read();
  Serial.println(" }");

  Serial.println("");
  Blynk.virtualWrite(V1, pm1);
  Blynk.virtualWrite(V2, pm2_5);
  Blynk.virtualWrite(V3, pm10);
  Blynk.virtualWrite(V4, hum);
  Blynk.virtualWrite(V5, temp);


  delay(2000);
}
