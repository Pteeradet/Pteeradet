#include <DHT.h>
#include <time.h>
#include <WiFiClientSecure.h>
#include <SoftwareSerial.h>
#include <TridentTD_LineNotify.h>

#define BLYNK_TEMPLATE_ID "TMPL6DxGSoS9L"
#define BLYNK_TEMPLATE_NAME "Project IoT"
#define BLYNK_FIRMWARE_VERSION "0.1.0"
#include <BlynkSimpleEsp32.h>

#define DHTPIN 23
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);
#define BLYNK_AUTH_TOKEN "POx793R8ghgoB2oD8-TNa0rB2zGLYlZc"
#define LINE_TOKEN "kp1jVTC8RwovwSvbrNx0SdLzyhiYiLGDXntWIaOfBba"

int timezone = 7 * 3600;
int dst = 0;
int WeekDay;
char day;

SoftwareSerial mySerial(21, 22);  // RX, TX
unsigned int pm1 = 0;
unsigned int pm2_5 = 0;
unsigned int pm10 = 0;

const char* ssid = "James 2.4GHz";
const char* password = "Jm0475Bl.";
const char* server = "www.howsmyssl.com";

const char* test_root_ca =
  "-----BEGIN CERTIFICATE-----\n"
  "MIIDSjCCAjKgAwIBAgIQRK+wgNajJ7qJMDmGLvhAazANBgkqhkiG9w0BAQUFADA/\n"
  "MSQwIgYDVQQKExtEaWdpdGFsIFNpZ25hdHVyZSBUcnVzdCBDby4xFzAVBgNVBAMT\n"
  "DkRTVCBSb290IENBIFgzMB4XDTAwMDkzMDIxMTIxOVoXDTIxMDkzMDE0MDExNVow\n"
  "PzEkMCIGA1UEChMbRGlnaXRhbCBTaWduYXR1cmUgVHJ1c3QgQ28uMRcwFQYDVQQD\n"
  "Ew5EU1QgUm9vdCBDQSBYMzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEB\n"
  "AN+v6ZdQCINXtMxiZfaQguzH0yxrMMpb7NnDfcdAwRgUi+DoM3ZJKuM/IUmTrE4O\n"
  "rz5Iy2Xu/NMhD2XSKtkyj4zl93ewEnu1lcCJo6m67XMuegwGMoOifooUMM0RoOEq\n"
  "OLl5CjH9UL2AZd+3UWODyOKIYepLYYHsUmu5ouJLGiifSKOeDNoJjj4XLh7dIN9b\n"
  "xiqKqy69cK3FCxolkHRyxXtqqzTWMIn/5WgTe1QLyNau7Fqckh49ZLOMxt+/yUFw\n"
  "7BZy1SbsOFU5Q9D8/RhcQPGX69Wam40dutolucbY38EVAjqr2m7xPi71XAicPNaD\n"
  "aeQQmxkqtilX4+U9m5/wAl0CAwEAAaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAOBgNV\n"
  "HQ8BAf8EBAMCAQYwHQYDVR0OBBYEFMSnsaR7LHH62+FLkHX/xBVghYkQMA0GCSqG\n"
  "SIb3DQEBBQUAA4IBAQCjGiybFwBcqR7uKGY3Or+Dxz9LwwmglSBd49lZRNI+DT69\n"
  "ikugdB/OEIKcdBodfpga3csTS7MgROSR6cz8faXbauX+5v3gTt23ADq1cEmv8uXr\n"
  "AvHRAosZy5Q6XkjEGB5YGV8eAlrwDPGxrancWYaLbumR9YbK+rlmM6pZW87ipxZz\n"
  "R8srzJmwN0jP41ZL9c8PDHIyh8bwRLtTcm1D9SZImlJnt1ir/md2cXjbDaJWFBM5\n"
  "JDGFoqgCWjBH4d1QB7wCCZAA62RjYJsWvIjJEubSfZGL+T0yjWW06XyxV3bqxbYo\n"
  "Ob8VZRzI9neWagqNdwvYkQsEjgfbKbYK7p2CNTUQ\n"
  "-----END CERTIFICATE-----\n";

// You can use x.509 client certificates if you want
//const char* test_client_key = "";   //to verify the client
//const char* test_client_cert = "";  //to verify the client


WiFiClientSecure client;

int tempstatus = 0;
int previousTemp = -1;

void setup() {
  //Initialize serial and wait for port to open:
  Serial.begin(9600);
  while (!Serial)
    ;
  mySerial.begin(9600);
  LINE.setToken(LINE_TOKEN);
  dht.begin();
  delay(100);

  Serial.print("Attempting to connect to SSID: ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  Blynk.begin(BLYNK_AUTH_TOKEN, ssid, password);
  // attempt to connect to Wifi network:
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    // wait 1 second for re-trying
    delay(1000);
  }

  Serial.print("Connected to ");
  Serial.println(ssid);

  client.setCACert(test_root_ca);


  Serial.println("\nStarting connection to server...");
  if (!client.connect(server, 443))
    Serial.println("Connection failed!");
  else {
    Serial.println("Connected to server!");
    // Make a HTTP request:
    client.println("GET https://www.howsmyssl.com/a/check HTTP/1.0");
    client.println("Host: www.howsmyssl.com");
    client.println("Connection: close");
    client.println();


    // if there are incoming bytes available
    // from the server, read them and print them:
    while (client.available()) {
      char c = client.read();
      Serial.write(c);
    }

    client.stop();
  }
  float hum = dht.readHumidity();
  float temp = dht.readTemperature();
}

void loop() {
  //blynk code
  Blynk.run();
  int index = 0;
  char value;
  char previousValue;



  configTime(timezone, dst, "ntp.ku.ac.th", "fw.eng.ku.ac.th");
  time_t now = time(nullptr);
  struct tm* p_tm = localtime(&now);
  Serial.print("Date : ");
  switch (p_tm->tm_wday) {
    case 0: Serial.println("Sunday"); break;
    case 1: Serial.println("Monday"); break;
    case 2: Serial.println("Tueday"); break;
    case 3: Serial.println("Wednesday"); break;
    case 4: Serial.println("Thursday"); break;
    case 5: Serial.println("Friday"); break;
    case 6: Serial.println("Satday"); break;
  }
  Serial.print("Time : ");
  Serial.print(p_tm->tm_hour);
  Serial.print(":");
  Serial.print(p_tm->tm_min);
  Serial.print(":");
  Serial.println(p_tm->tm_sec);

  //DHT code
  float hum = dht.readHumidity();
  float temp = dht.readTemperature();


  if (isnan(hum) || isnan(temp)) {
    Serial.println(F("Failed to read from DHT sensor!"));
    delay(2000);
    return;
  }
  Serial.print(F("Humidity: "));
  Serial.print(hum);
  Serial.print(F("%  Temperature: "));
  Serial.print(temp);
  Serial.print(F("째C "));
  Serial.println();


  //psm5003 code
  while (mySerial.available()) {
    value = mySerial.read();
    if ((index == 0 && value != 0x42) || (index == 1 && value != 0x4d)) {
      Serial.println("Cannot find the data header.");
      break;
    }

    if (index == 4 || index == 6 || index == 8 || index == 10 || index == 12 || index == 14) {
      previousValue = value;

    } else if (index == 5) {

      pm2_5 = 256 * previousValue + value;
      Serial.print("\"pm2_5\": ");
      Serial.print(pm2_5);
      Serial.print(" ug/m3");
      Serial.print(", ");
    } else if (index == 7) {

      pm10 = 256 * previousValue + value;
      Serial.print("\"pm10\": ");
      Serial.print(pm10);
      Serial.print(" ug/m3");
    } else if (index > 15) {

      break;
    }
    index++;
  }
  while (mySerial.available()) mySerial.read();
  Serial.println(" }");

  Serial.println("");
  Blynk.virtualWrite(V2, pm2_5);
  Blynk.virtualWrite(V3, pm10);
  Blynk.virtualWrite(V4, hum);
  Blynk.virtualWrite(V5, temp);

  if (temp > 40) {
    tempstatus = 0;
  } else {
    tempstatus = 1;
  }

  //line code
  if (tempstatus != previousTemp) {
    if (tempstatus == 0) {
      LINE.notify("High Temperature\n"
                  "Temperature: "
                  + String(temp) + " 째C\nHumidity: " + String(hum) + " %");a
      LINE.notify("PM2.5: " + String(pm2_5) + "ug/m3\n" + "PM10: " + String(pm10) + "ug/m3");
    } else {
      LINE.notify("Normal Temperature\n"
                  "Temperature: "
                  + String(temp) + " 째C\nHumidity: " + String(hum) + " %");
      LINE.notify("PM2.5: " + String(pm2_5) + "ug/m3\n" + "PM10: " + String(pm10) + "ug/m3");
    }
    previousTemp = tempstatus;
  }
  int treehour = p_tm->tm_hour % 3;
  if (treehour == 0) {
    if (p_tm->tm_min == 0 && (p_tm->tm_sec == 0) || (p_tm->tm_sec == 1)) {
      LINE.notify("Temperature: " + String(temp) + " 째C\nHumidity: " + String(hum) + " %");
      LINE.notify("PM2.5: " + String(pm2_5) + "ug/m3\n" + "PM10: " + String(pm10) + "ug/m3");
    }
  }

  delay(2000);
}
