#include <TridentTD_LineNotify.h>

#define SSID        "Trdd_ps"                                       //ใส่ ชื่อ Wifi ที่จะเชื่อมต่อ
#define PASSWORD    "0989914539"                                    //ใส่ รหัส Wifi
#define LINE_TOKEN  "kp1jVTC8RwovwSvbrNx0SdLzyhiYiLGDXntWIaOfBba"   //ใส่ รหัส TOKEN ที่ได้มาจากข้างบน

int tem = 0;
int hum = 0;

#include "DHTesp.h" // Click here to get the library: http://librarymanager/All#DHTesp

#ifndef ESP32
#pragma message(THIS EXAMPLE IS FOR ESP32 ONLY!)
#error Select ESP32 board.
#endif

DHTesp dht;

void tempTask(void *pvParameters);
bool getTemperature();

TaskHandle_t tempTaskHandle = NULL;

bool tasksEnabled = false;
int dhtPin = 22;
bool isOverTempNotified = false;

bool initTemp() {
  byte resultValue = 0;
  // Initialize temperature sensor
  dht.setup(dhtPin, DHTesp::DHT11);
  Serial.println("DHT initiated");

  // Start task to get temperature
  xTaskCreatePinnedToCore(
    tempTask,                       /* Function to implement the task */
    "tempTask ",                    /* Name of the task */
    4000,                           /* Stack size in words */
    NULL,                           /* Task input parameter */
    5,                              /* Priority of the task */
    &tempTaskHandle,                /* Task handle. */
    1);                             /* Core where the task should run */

  if (tempTaskHandle == NULL) {
    Serial.println("Failed to start task for temperature update");
    return false;
  }
  return true;
}

void tempTask(void *pvParameters) {
  Serial.println("tempTask loop started");
  while (1) // tempTask loop
  {
    if (tasksEnabled) {
      // Get temperature values
      getTemperature();
    }
    // Got sleep again
    vTaskSuspend(NULL);
  }
}

bool getTemperature() {
  TempAndHumidity newValues = dht.getTempAndHumidity();
  // Check if any reads failed and exit early (to try again).
  if (dht.getStatus() != 0) {
    Serial.println("DHT11 error status: " + String(dht.getStatusString()));
    return false;
  }

  float heatIndex = dht.computeHeatIndex(newValues.temperature, newValues.humidity);
  float dewPoint = dht.computeDewPoint(newValues.temperature, newValues.humidity);

  Serial.println("Temperature: " + String(newValues.temperature) + " °C   Humidity: " + String(newValues.humidity) + " %");
  tem = newValues.temperature;
  hum = newValues.humidity;

  return true;
}

void setup() {

  Serial.begin(115200);
  Serial.println();
  Serial.println(LINE.getVersion());

  WiFi.begin(SSID, PASSWORD);
  Serial.printf("WiFi connecting to %s\n",  SSID);
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(400);
  }
  Serial.printf("\nWiFi connected\nIP : ");
  Serial.println(WiFi.localIP());

  // Set Line Token
  LINE.setToken(LINE_TOKEN);

  Serial.println("DHT ESP32 example with tasks");
  initTemp();
}

bool isTemperatureSent = false;

void loop() {
  if (!tasksEnabled) {
    // Wait 2 seconds to let system settle down
    delay(2000);
    // Enable task that will read values from the DHT sensor
    tasksEnabled = true;
    if (tempTaskHandle != NULL) {
      vTaskResume(tempTaskHandle);
    }
  }
  
  if (tasksEnabled) {
    if (getTemperature()) {
      // Send temperature and humidity data to LINE only if it hasn't been sent before
      if (!isTemperatureSent) {
        LINE.notify("Temperature: " + String(tem) + " °C   Humidity: " + String(hum) + " %");
        isTemperatureSent = true; // Set the flag to indicate that temperature has been sent
      }

      // Check if temperature is over the limit
      if (tem > 40 && !isOverTempNotified) {
        LINE.notify("Temperature exceeds the limit!");
        isOverTempNotified = true;
      }
    }
    else {
      // Reset the flag if temperature reading fails
      isTemperatureSent = false;
    }
  }
}

